plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
}

sourceCompatibility = '17'
targetCompatibility = '17'

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	flatDir {
		dirs "./lib"
	}
	maven { url "https://maven.shedaniel.me/" }
	maven {
		name = 'babbaj-repo'
		url = 'https://babbaj.github.io/maven/'
	}
}

def urlFile = { url, name, version ->
	File file = new File("$rootDir/lib/${name}-${version}.jar")
	file.parentFile.mkdirs()
	if (!file.exists()) {
		new URL(url).withInputStream { downloadStream ->
			file.withOutputStream { fileOut ->
				fileOut << downloadStream
			}
		}
	}
	return [name: name, version: version]
}


dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"


	//modImplementation urlFile("https://github.com/cabaletta/baritone/releases/download/v1.10.2/baritone-api-fabric-1.10.2.jar", 'baritone', '1.20.4-1.10.2')
	//modImplementation files("C:/Users/hzant/IdeaProjects/baritone-zante/dist/baritone-api-fabric-1.9.3-66-gfac6749e.jar")
	modImplementation urlFile("https://github.com/ZMobile/baritone/releases/download/v1.11.0-Mobitone-Singleplayer/mobitone1.21.jar", 'mobitone', '1.21')
	modImplementation "dev.babbaj:nether-pathfinder:1.4.1"

	// Include the cloth-config jar in the lib directory
	//modImplementation files('lib/mobitone1.21.jar')
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	//modImplementation urlFile("https://www.curseforge.com/minecraft/mc-mods/cloth-config/download/4973455", 'cloth-config', '13.0.121-fabric')
	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

configurations {
	includeInJar
}

dependencies {
	includeInJar "dev.babbaj:nether-pathfinder:1.4.1"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 17
	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = targetVersion
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

tasks.register('includeDependencies', Copy) {
	from {
		configurations.includeInJar.collect { it.isDirectory() ? it : zipTree(it) }
	}
	into "$buildDir/dependencies"
}
jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}

	dependsOn tasks.named('includeDependencies')
	from {
		tasks.named('includeDependencies').get().destinationDir
	}
}

// configure the maven publication
/*publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}*/